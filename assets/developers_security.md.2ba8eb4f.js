import{_ as s,c as a,o as n,d as l}from"./app.fbbce50a.js";const h=JSON.parse('{"title":"그누보드 보안","description":"","frontmatter":{},"headers":[{"level":2,"title":"SQL Injection","slug":"sql-injection","link":"#sql-injection","children":[]},{"level":2,"title":"오염된 글로벌 변수: extract()","slug":"오염된-글로벌-변수-extract","link":"#오염된-글로벌-변수-extract","children":[]},{"level":2,"title":"그누보드에서 제공하는 함수","slug":"그누보드에서-제공하는-함수","link":"#그누보드에서-제공하는-함수","children":[{"level":3,"title":"htmlspecialchars2()","slug":"htmlspecialchars2","link":"#htmlspecialchars2","children":[]},{"level":3,"title":"clean_xss_tags()","slug":"clean-xss-tags","link":"#clean-xss-tags","children":[]}]}],"relativePath":"developers/security.md","lastUpdated":1674203221000}'),e={name:"developers/security.md"},p=l(`<h1 id="그누보드-보안" tabindex="-1">그누보드 보안 <a class="header-anchor" href="#그누보드-보안" aria-hidden="true">#</a></h1><p>TBD</p><h2 id="sql-injection" tabindex="-1">SQL Injection <a class="header-anchor" href="#sql-injection" aria-hidden="true">#</a></h2><p>SQL Injection 공격은 흔하고 자주 발생하는 문제이다. 그누보드 취약점의 많은 부분이 SQL Injection으로 발생하고 여전히 이 문제로 자주 취약점 패치가 이뤄지고있다. 사용자의 입력 값 등 요청으로 받은 데이터가 안전한지 검증하지않아 발생하는 문제이다.</p><h2 id="오염된-글로벌-변수-extract" tabindex="-1">오염된 글로벌 변수: extract() <a class="header-anchor" href="#오염된-글로벌-변수-extract" aria-hidden="true">#</a></h2><p>그누보드에서는 전송받은 요청을 글로벌 변수로 모두 풀어놓는 방식을 사용한다.</p><p>이로인해 글로벌 변수가 오염된다. 그누보드 배포본은 물론 테마나 스킨 등 모든 사용처에서 모든 변수가 위험에 노출되어있다. 또한, 글로벌 스코프에 노출되어 다양한 스킨이 동작하면서 변수가 완전히 다른 값으로 대체되었을 수 있다.</p><details class="details custom-block"><summary>register_globals</summary><p><code>register_globals = on</code>과 같은 PHP 설정과 비슷한 효과를 내주며 편의를 위해 사용했던 방법이지만 보안에는 좋지 않다. PHP 5.4 버전에서 완전히 제거된 옵션이다.</p></details><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">extract</span><span style="color:#89DDFF;">($</span><span style="color:#A6ACCD;">_GET</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">extract</span><span style="color:#89DDFF;">($</span><span style="color:#A6ACCD;">_POST</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">extract</span><span style="color:#89DDFF;">($</span><span style="color:#A6ACCD;">_SERVER</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><p>PHP 매뉴얼에서는 <code>$_GET</code>, <code>$_FILES</code> 등의 사용자 입력 값처럼 외부로부터 전송받는 데이터를 <code>extract()</code> 함수로 이용하지 말라고 경고한다.</p><blockquote><p>Warning Do not use extract() on untrusted data, like user input (e.g. $_GET, $_FILES).</p></blockquote><details class="details custom-block"><summary>extract</summary><p><code>extract()</code> 함수 자체는 유용하게 사용될 수 있지만 안전하지않은 변수를 풀어놓아 문제를 만든 것이다. 그럼에도 extract() 대신 <a href="https://www.php.net/manual/en/function.list.php" target="_blank" rel="noreferrer"><code>list()</code></a>를 대신 사용하자.</p></details><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(!$</span><span style="color:#A6ACCD;">href</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">href </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/list</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">a href</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">&lt;?php echo </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">href</span><span style="color:#C3E88D;"> ?&gt;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">목록보기</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>이와 같이 <code>if</code> 조건문 안에서만 초기화된 변수는 <code>http://.../bbs.php?href=hack_code</code> 같은 방법으로 <code>$href</code> 변수에 <code>hack_code</code>를 값으로 받아 공격에 이용될 수 있다.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>물론 그누보드에서 <code>$_POST</code>, <code>$_GET</code>, <code>$_COOKIE</code>, <code>$_REQUEST</code> 변수에 담긴 모든 요청 값에 따옴표(<code>&quot;</code>) 등의 문자에 백슬래시(<code>\\</code>)를 추가하는 등의 방법을 사용한다. 하지만 이를 변수를 출력하는 곳이나 의도하지 않았더라도 로직을 거치면서 안전하지않은 상태로 변환되었을 수 있다.</p><p><a href="https://www.php.net/manual/en/function.htmlspecialchars" target="_blank" rel="noreferrer"><code>htmlspecialchars()</code></a>, <a href="https://www.php.net/manual/en/function.htmlentities.php" target="_blank" rel="noreferrer"><code>htmlentities()</code></a> 함수로 처리 후 사용하는 게 안전하다.</p></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>변수를 사용할 때는 반드시 먼저 초기화 후에 사용해야한다.</p></div><p>그누보드에서 초기화하고 DB에서 가져온 데이터를 담고 있는 $wr_id, $bo_table, $member 등의 변수는 그대로 사용해야겠지만, 사용하려는 변수가 위 사례처럼 특정 조건에서만 초기화된 것은 아닌지 반드시 사용하고 사용해야 한다.</p><p>그누보드에 주요하게 사용하는 변수는 <code>/common.php</code> 파일에서 찾아볼 수 있으며, <code>/bbs/board.php</code> 등에서 게시판 스킨에서 사용될 변수를 초기화하고 있으므로 확인해 보는 것이 좋다.</p><details class="details custom-block"><summary>오염된 변수의 위험에서 벗어나기</summary><p>Javascript에서 자주보이는 IIFE처럼 PHP 7 이상에서는 클로저를 이용한 방법으로 스코프를 제한하여 글로벌 변수 오염에서 안전할 수 있다.</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// $href 변수를 초기화하는 걸 까먹었다!</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">($</span><span style="color:#A6ACCD;">href</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 출력되지 않으며 extract()로 인한 위험에서도 벗어날 수 있다</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">&lt;a href=&quot;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">href </span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">&quot;&gt;목록보기&lt;/a&gt;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">})();</span></span>
<span class="line"></span></code></pre></div><p>물론 스킨에서는 HTML과 뒤섞여있기 때문에 이런 방법을 사용하기는 쉽지 않다.</p><p>안전하다고 판단되는 글로벌 변수를 가져올 수도 있다</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$</span><span style="color:#A6ACCD;">bo_table</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">})($</span><span style="color:#A6ACCD;">bo_table</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div></details><h2 id="그누보드에서-제공하는-함수" tabindex="-1">그누보드에서 제공하는 함수 <a class="header-anchor" href="#그누보드에서-제공하는-함수" aria-hidden="true">#</a></h2><h3 id="htmlspecialchars2" tabindex="-1">htmlspecialchars2() <a class="header-anchor" href="#htmlspecialchars2" aria-hidden="true">#</a></h3><h3 id="clean-xss-tags" tabindex="-1">clean_xss_tags() <a class="header-anchor" href="#clean-xss-tags" aria-hidden="true">#</a></h3>`,22),o=[p];function t(c,r,i,D,d,F){return n(),a("div",null,o)}const C=s(e,[["render",t]]);export{h as __pageData,C as default};
